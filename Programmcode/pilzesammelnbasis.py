# -*- coding: utf-8 -*-
"""PilzesammelnBasis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q1LFUmSSCcV_1knjle4tHM46vZVJBx45
"""

from math import *
from random import randrange, seed, shuffle


## Strategien für Pilzsammler:innen

class Picker:                # Basis Klasse (Oberklasse) für Pilzsammler:innen
  def __init__(self, name):
    self.name = name
    self.last = 0  # Letzte durchgeführte Handlung
    self.costs = 0 # Kosten für Pilzsammler:inn

  def inc(self, n):
    """Erhöhe Kosten um n"""
    self.costs += n

class Coop(Picker):          # Teilt die Pilze immer
  def share(self, opp):
    self.last = 0
    return self.last

## Erweitere hier den Code mit deinen Strategien


def simulateDay(a,b,n):
  """Führt die Gegenüberstellung (Teilen oder nicht teilen) aus."""
  seed()
  ascore = bscore = 0
  for i in range(0,n):
    x = a.share(b), b.share(a)
    if x == (1,1):                   # Beide teilen (Kosten 1) 
      a.inc(1); b.inc(1)
    elif x == (0,1):                 # B teilt nicht (Kosten A = 3, B = 0)
      a.inc(3); b.inc(0)
    elif x == (1,0):                 # A teilt nicht (Kosten B = 3, A = 0)
      a.inc(0); b.inc(3)
    elif x == (1,1):                 # Beide teilen nicht (Kosten = 2)                 
      a.inc(2); b.inc(2)


## Erstellen von Pilzsammler:innen 

## Erstelle hier deine Pilzsammler:innen und 
## baue eine Liste 'persons' aus ihnen wie in Aufgabe 2.

persons = []     # Liste der Pilzsammler:innen


def simulateDays(days):
  """Simulation von teilenden oder nicht teilenden Pilzsammler:innen
  über mehrere Tage"""
  seed()
  totalpen = 0

  for day in range(0, days): # ausführen der Gegenüberstellung (Teilen oder nicht)
    shuffle(persons)           
    simulateDay(persons[0], persons[1], 6) 

  results = {} # dictionary der Personen (Namen) und ihren Kosten

  for person in persons: 
    results[person.costs] = person.name       
    totalpen += person.costs

  k = results.keys()                     
  print('\n')

  for i in sorted(k): 
    print('%8s' % results[i], '\t', '%0i' % i)

  print('\n\nTotal Penalties Suffered: ',totalpen)
      
## Das Programm startet hier
simulateDays(100000) # Simulieren von 100.000 Tagen